{"version":3,"sources":["types.ts","state/reducer.ts","state/state.tsx","constants.ts","components/Header.tsx","components/HealthRatingBar.tsx","PatientListPage/PatientList.tsx","components/FormFieldSelect.tsx","components/FormFieldText.tsx","components/FormFieldDate.tsx","AddPatientModal/PatientFormBase.tsx","styles/index.ts","AddPatientModal/AddPatientForm.tsx","components/ErrorMessage.tsx","AddPatientModal/index.tsx","PatientListPage/index.tsx","PatientPage/PatientDetails.tsx","components/FormFieldTextArea.tsx","AddEntryModal/EntryFormBase.tsx","AddEntryModal/EntryFormHospital.tsx","AddEntryModal/EntryFormOccupationalHealthcare.tsx","AddEntryModal/HealthRatingOptions.tsx","AddEntryModal/EntryFormHealthCheck.tsx","AddEntryModal/EntryFormDiagnosis.tsx","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","utils.ts","components/EntryDiagnosis.tsx","components/EntryCard.tsx","components/EntryHospital.tsx","components/EntryOccupationalHealthcare.tsx","components/EntryHealthCheck.tsx","components/EntryDetails.tsx","PatientPage/PatientEntries.tsx","PatientPage/index.tsx","components/ErrorPage.tsx","App.tsx","index.tsx"],"names":["HealthCheckRating","Gender","Type","addPatient","data","type","payload","updatePatient","initialState","patients","diagnoses","patient","undefined","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","apiBaseUrl","Header","Toolbar","disableGutters","style","marginBottom","Typography","component","variant","flexGrow","Link","RouterLink","to","underline","color","Button","HEALTHBAR_TEXTS","HEALTHBAR_SHORT_TEXTS","HealthRatingBar","rating","showText","index","PatientList","TableContainer","Paper","marginTop","Table","aria-label","TableHead","TableRow","TableCell","Hidden","xsDown","align","smDown","TableBody","map","scope","id","name","gender","occupation","healthRating","FormFieldSelect","field","label","options","Grid","item","xs","sm","TextField","fullWidth","select","option","MenuItem","FormFieldText","form","touched","errors","placeholder","required","error","Boolean","helperText","FormFieldDate","InputLabelProps","shrink","genderOptions","Other","Male","Female","PatientFormBase","formStyle","maxWidth","backgroundColor","padding","PatientSchema","Yup","shape","min","max","dateOfBirth","ssn","AddPatientForm","onSubmit","onCancel","initialValues","validationSchema","isValid","dirty","container","spacing","size","disabled","onClick","ErrorMessage","gutterBottom","AddPatentModal","handleSubmit","handleOpen","handleClose","open","Dialog","onClose","display","alignItems","justifyContent","PatientListPage","useState","setOpen","setError","submitNewPatient","values","a","axios","post","newPatient","Error","message","alignContent","marginRight","AddPatientModal","Object","PatientDetails","getGender","md","List","ListItem","ListItemText","primary","secondary","FormFieldTextArea","multiline","rows","typeOptions","Hospital","OccupationalHealthcare","HealthCheck","EntryFormBase","EntryFormHospital","discharge","setDischarge","FormControlLabel","control","Switch","checked","onChange","EntryFormOccupationalHealthcare","leave","setLeave","HealthRatingOptions","FormControl","margin","FormLabel","RadioGroup","row","event","num","Number","target","setFieldValue","Radio","EntryFormHealthCheck","EntryFormDiagnosis","setFieldTouched","codes","stateOptions","diagnosis","code","noWrap","Select","multiple","displayEmpty","setTimeout","input","Input","renderValue","selected","length","join","inputProps","EntrySchema","date","specialist","employerName","when","is","then","otherwise","diagnosisCodes","description","criteria","sickLeave","startDate","endDate","healthCheckRating","PatientEntryForm","Healthy","AddEntryModal","AddEntryForm","getDate","str","Date","toDateString","getDateRange","start","end","EntryDiagnosis","diagnosisData","filter","includes","disablePadding","EntryCard","Card","CardHeader","avatar","param","Avatar","orange","green","red","getAvatar","title","subheader","CardContent","Divider","EntryHospital","entry","EntryOccupationalHealthcare","EntryHealthCheck","EntryDetails","PatientEntries","entries","marginLeft","PatientPage","handlePatientList","useParams","loading","setLoading","fetchPatientFromAPI","get","patientFromApi","updatePatientToAPI","put","useEffect","keys","submitNewEntry","newEntry","ErrorPage","App","fetchPatientList","patientListFromApi","console","fetchDiagnosisList","diagnosisListFromApi","Container","path","exact","ReactDOM","render","action","reduce","memo","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8249290e.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport interface Discharge {\n  date: string;\n  criteria: string;\n}\n\nexport interface SickLeave {\n  startDate: string;\n  endDate: string;\n}\n\nexport enum HealthCheckRating {\n  \"Healthy\" = 1,\n  \"LowRisk\" = 2,\n  \"HighRisk\" = 3,\n  \"CriticalRisk\" = 4,\n}\n\nexport enum Gender {\n  Other = \"other\",\n  Male = \"male\",\n  Female = \"female\",\n}\n\n// entry types\ninterface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist?: string;\n  diagnosisCodes?: Array<Diagnosis[\"code\"]>;\n}\n\nexport interface HospitalEntry extends BaseEntry {\n  type: \"Hospital\";\n  discharge?: Discharge;\n}\n\nexport interface OccupationalHealthcareEntry extends BaseEntry {\n  type: \"OccupationalHealthcare\";\n  employerName: string;\n  sickLeave?: SickLeave;\n}\n\nexport interface HealthCheckEntry extends BaseEntry {\n  type: \"HealthCheck\";\n  healthCheckRating: HealthCheckRating;\n}\n\nexport type Entry =\n  | HospitalEntry\n  | OccupationalHealthcareEntry\n  | HealthCheckEntry;\n\n// patient\nexport interface Patient {\n  id: string;\n  name: string;\n  dateOfBirth?: string;\n  ssn?: string;\n  gender: Gender;\n  occupation: string;\n  entries?: Array<Entry>;\n  healthRating?: number | string;\n}\n\n// patient form\nexport type PatientFormValues = Omit<Patient, \"id\">;\n\n// entry form\nexport enum Type {\n  Hospital = \"Hospital\",\n  OccupationalHealthcare = \"OccupationalHealthcare\",\n  HealthCheck = \"HealthCheck\",\n}\n\nexport interface EntryFormValues extends Omit<BaseEntry, \"id\"> {\n  type: Type;\n  discharge?: Discharge;\n  employerName?: string;\n  healthCheckRating?: HealthCheckRating;\n  sickLeave?: SickLeave;\n}\n","import { State } from \"./state\";\nimport { Patient, Diagnosis } from \"../types\";\n\nexport type Action =\n  | {\n      type: \"SET_PATIENT_LIST\";\n      payload: Patient[];\n    }\n  | {\n      type: \"ADD_PATIENT\";\n      payload: Patient;\n    }\n  | {\n      type: \"UPDATE_PATIENT\";\n      payload: Patient;\n    }\n  | {\n      type: \"SET_DIAGNOSIS_LIST\";\n      payload: Diagnosis[];\n    };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients,\n        },\n      };\n    case \"ADD_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload,\n        },\n      };\n    case \"UPDATE_PATIENT\":\n      return {\n        ...state,\n        patient: action.payload,\n      };\n    case \"SET_DIAGNOSIS_LIST\":\n      return {\n        ...state,\n        diagnoses: {\n          ...action.payload.reduce(\n            (memo, diagnosis) => ({ ...memo, [diagnosis.code]: diagnosis }),\n            {}\n          ),\n          ...state.diagnoses,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setPatientList = (data: Patient[]): Action => {\n  return {\n    type: \"SET_PATIENT_LIST\",\n    payload: data,\n  };\n};\n\nexport const addPatient = (data: Patient): Action => {\n  return {\n    type: \"ADD_PATIENT\",\n    payload: data,\n  };\n};\n\nexport const updatePatient = (data: Patient): Action => {\n  return {\n    type: \"UPDATE_PATIENT\",\n    payload: data,\n  };\n};\n\nexport const setDiagnosisList = (data: Diagnosis[]): Action => {\n  return {\n    type: \"SET_DIAGNOSIS_LIST\",\n    payload: data,\n  };\n};\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Patient, Diagnosis } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  diagnoses: { [id: string]: Diagnosis };\n  patient: Patient | undefined;\n};\n\nconst initialState: State = {\n  patients: {},\n  diagnoses: {},\n  patient: undefined,\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState,\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children,\n}) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n\nexport const useStateValue = (): [State, React.Dispatch<Action>] =>\n  useContext(StateContext);\n","// export const apiBaseUrl = \"http://localhost:3001/api\";\n// shorter url for development server\n// uses the proxy in package.json\nexport const apiBaseUrl = \"/api\";\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Header: React.FC = () => (\n  <Toolbar disableGutters style={{ marginBottom: 35 }}>\n    <Typography component=\"h1\" variant=\"h5\" style={{ flexGrow: 1 }}>\n      <Link\n        component={RouterLink}\n        to=\"/\"\n        underline=\"none\"\n        color=\"primary\"\n        variant=\"inherit\"\n      >\n        Patientor\n      </Link>\n    </Typography>\n    <Button component={RouterLink} to=\"/\" color=\"primary\">\n      Home\n    </Button>\n  </Toolbar>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst HEALTHBAR_TEXTS = [\n  \"The patient is in great shape\",\n  \"The patient has a low risk of getting sick\",\n  \"The patient has a high risk of getting sick\",\n  \"The patient has a diagnosed condition\",\n];\n\nconst HEALTHBAR_SHORT_TEXTS = [\n  \"Healthy\",\n  \"Low risk\",\n  \"High risk\",\n  \"Critical risk\",\n];\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HealthRatingBar: React.FC<BarProps> = ({ rating, showText }) => {\n  const index = rating - 1;\n  return (\n    <>{showText ? HEALTHBAR_TEXTS[index] : HEALTHBAR_SHORT_TEXTS[index]}</>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { Patient } from \"../types\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\n\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Link from \"@material-ui/core/Link\";\nimport Hidden from \"@material-ui/core/Hidden\";\n\nconst PatientList: React.FC<{ patients: Patient[] }> = ({ patients }) => (\n  <TableContainer component={Paper} style={{ marginTop: 35 }}>\n    <Table aria-label=\"patient list\">\n      <TableHead>\n        <TableRow>\n          <TableCell>Name</TableCell>\n          <Hidden xsDown>\n            <TableCell align=\"right\">Gender</TableCell>\n          </Hidden>\n          <Hidden smDown>\n            <TableCell align=\"right\">Occupation</TableCell>\n          </Hidden>\n          <TableCell align=\"right\">Health Rating</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {patients.map((patient: Patient) => (\n          <TableRow key={patient.id}>\n            <TableCell component=\"th\" scope=\"row\">\n              <Link component={RouterLink} to={`/patients/${patient.id}`}>\n                {patient.name}\n              </Link>\n            </TableCell>\n            <Hidden xsDown>\n              <TableCell align=\"right\">{patient.gender}</TableCell>\n            </Hidden>\n            <Hidden smDown>\n              <TableCell align=\"right\">{patient.occupation}</TableCell>\n            </Hidden>\n            <TableCell align=\"right\">\n              {typeof patient.healthRating === \"number\" ? (\n                <HealthRatingBar\n                  rating={patient.healthRating}\n                  showText={false}\n                />\n              ) : (\n                patient.healthRating\n              )}\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>\n);\n\nexport default PatientList;\n","import React from \"react\";\nimport { FieldProps } from \"formik\";\nimport { Type, Gender } from \"../types\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\n// Types\nexport type SelectOption = {\n  value: Type | Gender;\n  label: string;\n};\n\ninterface Props extends FieldProps {\n  label: string;\n  options: SelectOption[];\n}\n\nconst FormFieldSelect: React.FC<Props> = ({ field, label, options }) => (\n  <Grid item xs={12} sm={6}>\n    <TextField\n      fullWidth\n      select\n      id={`select-${field.name}`}\n      label={label}\n      {...field}\n    >\n      {options.map((option) => (\n        <MenuItem key={option.value} value={option.value}>\n          {option.label || option.value}\n        </MenuItem>\n      ))}\n    </TextField>\n  </Grid>\n);\n\nexport default FormFieldSelect;\n","import React from \"react\";\nimport { FieldProps } from \"formik\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\n\ninterface Props extends FieldProps {\n  id: string;\n  label: string;\n  placeholder: string;\n  required?: boolean;\n}\n\nconst FormFieldText: React.FC<Props> = ({\n  field,\n  form: { touched, errors },\n  id,\n  label,\n  placeholder,\n  required,\n}) => (\n  <Grid item xs={12}>\n    <TextField\n      fullWidth\n      id={id}\n      label={label}\n      placeholder={placeholder}\n      required={required}\n      error={touched[field.name] && Boolean(errors[field.name])}\n      helperText={touched[field.name] && errors[field.name]}\n      {...field}\n    />\n  </Grid>\n);\n\nexport default FormFieldText;\n","import React from \"react\";\nimport { FieldProps } from \"formik\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\n\ninterface Props extends FieldProps {\n  id: string;\n  label: string;\n  required?: boolean;\n}\n\nconst FormFieldDate: React.FC<Props> = ({\n  field,\n  form: { touched, errors },\n  id,\n  label,\n  required,\n}) => (\n  <Grid item xs={12} sm={6}>\n    <TextField\n      fullWidth\n      id={id}\n      label={label}\n      type=\"date\"\n      required={required}\n      InputLabelProps={{\n        shrink: true,\n      }}\n      error={touched[field.name] && Boolean(errors[field.name])}\n      helperText={touched[field.name] && errors[field.name]}\n      {...field}\n    />\n  </Grid>\n);\n\nexport default FormFieldDate;\n","import React from \"react\";\nimport { Field } from \"formik\";\nimport { Gender } from \"../types\";\nimport FormFieldSelect, { SelectOption } from \"../components/FormFieldSelect\";\nimport FormFieldText from \"../components/FormFieldText\";\nimport FormFieldDate from \"../components/FormFieldDate\";\n\nconst genderOptions: SelectOption[] = [\n  { value: Gender.Other, label: \"Other\" },\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n];\n\nconst PatientFormBase: React.FC = () => {\n  return (\n    <>\n      <Field\n        id=\"patient-name\"\n        label=\"Name\"\n        placeholder=\"Name\"\n        name=\"name\"\n        component={FormFieldText}\n        required\n      />\n      <Field\n        id=\"patient-gender\"\n        label=\"Gender\"\n        name=\"gender\"\n        options={genderOptions}\n        component={FormFieldSelect}\n        required\n      />\n      <Field\n        id=\"patient-dob\"\n        label=\"Date Of Birth\"\n        name=\"dateOfBirth\"\n        component={FormFieldDate}\n        required\n      />\n      <Field\n        id=\"patient-ssn\"\n        label=\"Social Security Number\"\n        placeholder=\"SSN\"\n        name=\"ssn\"\n        component={FormFieldText}\n        required\n      />\n      <Field\n        id=\"patient-occupation\"\n        label=\"Occupation\"\n        placeholder=\"Occupation\"\n        name=\"occupation\"\n        component={FormFieldText}\n        required\n      />\n    </>\n  );\n};\n\nexport default PatientFormBase;\n","export const formStyle = {\n  flexGrow: 1,\n  maxWidth: 600,\n  backgroundColor: \"white\",\n  padding: \"35px 25px\",\n};\n","import React from \"react\";\nimport * as Yup from \"yup\";\nimport { Formik, Form } from \"formik\";\nimport { PatientFormValues, Gender } from \"../types\";\nimport PatientFormBase from \"./PatientFormBase\";\n\nimport { formStyle } from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\n// Yup\nconst PatientSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, \"Name is too short\")\n    .max(35, \"Name is too long\")\n    .required(\"Name is required\"),\n  dateOfBirth: Yup.date().required(\"DOB is required\"),\n  ssn: Yup.string().min(11).max(12).required(\"SSN is required\"),\n  occupation: Yup.string().min(4).max(35).required(\"Occupation is required\"),\n});\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => (\n  <div>\n    <Formik\n      initialValues={{\n        name: \"\",\n        dateOfBirth: \"\",\n        ssn: \"\",\n        gender: Gender.Other,\n        occupation: \"\",\n      }}\n      onSubmit={onSubmit}\n      validationSchema={PatientSchema}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form style={formStyle}>\n            <Grid container spacing={2}>\n              <PatientFormBase />\n              <Grid item xs={6}>\n                <Button\n                  fullWidth\n                  type=\"submit\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"large\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid>\n              <Grid item xs={6}>\n                <Button\n                  fullWidth\n                  type=\"button\"\n                  color=\"secondary\"\n                  variant=\"outlined\"\n                  size=\"large\"\n                  onClick={onCancel}\n                >\n                  Cancel\n                </Button>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  </div>\n);\n\nexport default AddPatientForm;\n","import React from \"react\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nconst ErrorMessage: React.FC<{ error: string }> = ({ error }) => (\n  <Typography color=\"secondary\" align=\"center\" gutterBottom>\n    Entry not submitted. {error}.\n  </Typography>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport { PatientFormValues } from \"../types\";\nimport AddPatientForm from \"./AddPatientForm\";\nimport ErrorMessage from \"../components/ErrorMessage\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\n\ninterface Props {\n  handleSubmit: (values: PatientFormValues) => void;\n  handleOpen: () => void;\n  handleClose: () => void;\n  open: boolean;\n  error?: string;\n}\n\nconst AddPatentModal: React.FC<Props> = ({\n  handleSubmit,\n  handleOpen,\n  handleClose,\n  open,\n  error,\n}) => (\n  <div>\n    <Button type=\"button\" variant=\"outlined\" onClick={handleOpen}>\n      Add New Patient\n    </Button>\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <AddPatientForm onSubmit={handleSubmit} onCancel={handleClose} />\n      {error && <ErrorMessage error={error} />}\n    </Dialog>\n  </div>\n);\n\nexport default AddPatentModal;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { apiBaseUrl } from \"../constants\";\nimport { useStateValue, addPatient } from \"../state\";\nimport { Patient, PatientFormValues } from \"../types\";\nimport PatientList from \"./PatientList\";\nimport AddPatientModal from \"../AddPatientModal\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n  const [open, setOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const handleError = () => setError(undefined);\n\n  const handleOpen = () => setOpen(true);\n\n  const handleClose = () => {\n    setOpen(false);\n    handleError();\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n\n      dispatch(addPatient({ ...newPatient, healthRating: \"Not given\" }));\n      handleClose();\n    } catch (err: unknown) {\n      err instanceof Error ? setError(err.message) : setError(\"Unknown Error\");\n    }\n  };\n\n  return (\n    <>\n      <Grid container alignContent=\"center\">\n        <Typography\n          variant=\"h4\"\n          component=\"h3\"\n          color=\"textPrimary\"\n          style={{ marginRight: 25 }}\n        >\n          Patients\n        </Typography>\n        <AddPatientModal\n          handleSubmit={submitNewPatient}\n          handleOpen={handleOpen}\n          handleClose={handleClose}\n          open={open}\n          error={error}\n        />\n      </Grid>\n      <PatientList patients={Object.values(patients)} />\n    </>\n  );\n};\n\nexport default PatientListPage;\n","import React from \"react\";\nimport { Patient } from \"../types\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nconst PatientDetails: React.FC<{ patient: Patient }> = ({ patient }) => {\n  const getGender = (option: string) => {\n    switch (option) {\n      case \"male\":\n        return (\n          <Typography variant=\"h4\" component=\"span\" color=\"primary\">\n            {\"\\u2642\"}\n          </Typography>\n        );\n      case \"female\":\n        return (\n          <Typography variant=\"h4\" component=\"span\" color=\"secondary\">\n            {\"\\u2640\"}\n          </Typography>\n        );\n      default:\n        return (\n          <Typography variant=\"h4\" component=\"span\" color=\"textSecondary\">\n            {\"\\u2642\" + \"\\u2640\"}\n          </Typography>\n        );\n    }\n  };\n\n  return (\n    <Grid container alignContent=\"center\" justifyContent=\"space-between\">\n      <Grid container item xs justifyContent=\"flex-start\">\n        <Typography\n          variant=\"h4\"\n          component=\"h3\"\n          color=\"textPrimary\"\n          style={{ marginRight: 25 }}\n        >\n          {patient.name}\n        </Typography>\n        {getGender(patient.gender)}\n      </Grid>\n      <Grid item xs={12} sm={4} md={6}>\n        <List>\n          <ListItem>\n            <ListItemText primary=\"Ssn:\" secondary={patient.ssn} />\n          </ListItem>\n          <ListItem>\n            <ListItemText\n              primary=\"Occupation:\"\n              secondary={patient.occupation}\n            />\n          </ListItem>\n        </List>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default PatientDetails;\n","import React from \"react\";\nimport { FieldProps } from \"formik\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\n\ninterface Props extends FieldProps {\n  id: string;\n  label: string;\n  placeholder: string;\n  required?: boolean;\n}\n\nconst FormFieldTextArea: React.FC<Props> = ({\n  field,\n  form: { touched, errors },\n  id,\n  label,\n  placeholder,\n  required,\n}) => (\n  <Grid item xs={12}>\n    <TextField\n      fullWidth\n      multiline\n      id={id}\n      label={label}\n      placeholder={placeholder}\n      required={required}\n      rows=\"2\"\n      error={touched[field.name] && Boolean(errors[field.name])}\n      helperText={touched[field.name] && errors[field.name]}\n      {...field}\n    />\n  </Grid>\n);\n\nexport default FormFieldTextArea;\n","import React from \"react\";\nimport { Field } from \"formik\";\nimport { Type } from \"../types\";\nimport FormFieldSelect, { SelectOption } from \"../components/FormFieldSelect\";\nimport FormFieldText from \"../components/FormFieldText\";\nimport FormFieldDate from \"../components/FormFieldDate\";\nimport FormFieldTextArea from \"../components/FormFieldTextArea\";\n\nconst typeOptions: SelectOption[] = [\n  { value: Type.Hospital, label: \"Hospital\" },\n  { value: Type.OccupationalHealthcare, label: \"Occupational Healthcare\" },\n  { value: Type.HealthCheck, label: \"Health Check\" },\n];\n\nconst EntryFormBase: React.FC = () => (\n  <>\n    <Field\n      label=\"Type\"\n      name=\"type\"\n      options={typeOptions}\n      component={FormFieldSelect}\n    />\n    <Field\n      id=\"entry-date\"\n      label=\"Date\"\n      name=\"date\"\n      component={FormFieldDate}\n      required\n    />\n    <Field\n      id=\"entry-description\"\n      label=\"Description\"\n      placeholder=\"Add description\"\n      name=\"description\"\n      component={FormFieldTextArea}\n      required\n    />\n    <Field\n      id=\"entry-specialist\"\n      label=\"Specialist\"\n      placeholder=\"Add specialist\"\n      name=\"specialist\"\n      component={FormFieldText}\n      required\n    />\n  </>\n);\n\nexport default EntryFormBase;\n","import React, { useState } from \"react\";\nimport { Field } from \"formik\";\nimport FormFieldDate from \"../components/FormFieldDate\";\nimport FormFieldTextArea from \"../components/FormFieldTextArea\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\n\nconst EntryFormHospital: React.FC = () => {\n  const [discharge, setDischarge] = useState<boolean>(false);\n\n  return (\n    <>\n      <Grid item xs={12}>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={discharge}\n              onChange={() => setDischarge(!discharge)}\n              name=\"discharge\"\n              color=\"primary\"\n            />\n          }\n          label=\"Discharge form hospital\"\n        />\n      </Grid>\n      {discharge && (\n        <>\n          <Field\n            id=\"entry-discharge-date\"\n            label=\"Discharge date\"\n            name=\"discharge.date\"\n            component={FormFieldDate}\n          />\n          <Field\n            id=\"entry-discharge-criteriae\"\n            label=\"Criteria\"\n            placeholder=\"Criteria\"\n            name=\"discharge.criteria\"\n            component={FormFieldTextArea}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default EntryFormHospital;\n","import React, { useState } from \"react\";\nimport { Field } from \"formik\";\nimport FormFieldText from \"../components/FormFieldText\";\nimport FormFieldDate from \"../components/FormFieldDate\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\n\nconst EntryFormOccupationalHealthcare: React.FC = () => {\n  const [leave, setLeave] = useState<boolean>(false);\n\n  return (\n    <>\n      <Field\n        id=\"entry-employer-name\"\n        label=\"Employer Name\"\n        placeholder=\"Add employer's name\"\n        name=\"employerName\"\n        component={FormFieldText}\n        required\n      />\n      <Grid item xs={12}>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={leave}\n              onChange={() => setLeave(!leave)}\n              name=\"sickLeave\"\n              color=\"primary\"\n            />\n          }\n          label=\"Assign sick leave\"\n        />\n      </Grid>\n      {leave && (\n        <>\n          <Field\n            id=\"entry-sickleave-start-date\"\n            label=\"Start date\"\n            name=\"sickLeave.startDate\"\n            component={FormFieldDate}\n          />\n          <Field\n            id=\"entry-sickleave-end-date\"\n            label=\"End date\"\n            name=\"sickLeave.endDate\"\n            component={FormFieldDate}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default EntryFormOccupationalHealthcare;\n","import React from \"react\";\nimport { FieldProps } from \"formik\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\n\ninterface Props extends FieldProps<{ value: number }> {\n  label: string;\n}\n\nconst HealthRatingOptions: React.FC<Props> = ({ form, field, label }) => {\n  const handleChange = (event: React.ChangeEvent<{ value: string }>) => {\n    // change event target value to number\n    const num = Number(event.target.value);\n\n    form.setFieldValue(field.name, num);\n  };\n\n  return (\n    <Grid item xs={12}>\n      <FormControl fullWidth component=\"fieldset\" margin=\"dense\">\n        <FormLabel component=\"legend\" disabled>\n          {label}\n        </FormLabel>\n        <RadioGroup\n          row\n          aria-label=\"health rating\"\n          value={field.value}\n          onChange={handleChange}\n        >\n          <FormControlLabel value={1} control={<Radio />} label=\"Healthy\" />\n          <FormControlLabel value={2} control={<Radio />} label=\"Low risk\" />\n          <FormControlLabel value={3} control={<Radio />} label=\"High risk\" />\n          <FormControlLabel\n            value={4}\n            control={<Radio />}\n            label=\"Critical risk\"\n          />\n        </RadioGroup>\n      </FormControl>\n    </Grid>\n  );\n};\n\nexport default HealthRatingOptions;\n","import React from \"react\";\nimport { Field } from \"formik\";\nimport HealthRatingOptions from \"./HealthRatingOptions\";\n\nconst EntryFormHealthCheck: React.FC = () => (\n  <Field\n    label=\"Health Rating\"\n    name=\"healthCheckRating\"\n    component={HealthRatingOptions}\n  />\n);\n\nexport default EntryFormHealthCheck;\n","import React from \"react\";\nimport { FormikProps } from \"formik\";\nimport { Diagnosis } from \"../types\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Input from \"@material-ui/core/Input\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Typography from \"@material-ui/core/Typography\";\n\ninterface Props {\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n  diagnoses: Diagnosis[];\n  codes: string[] | undefined;\n}\n\nconst EntryFormDiagnosis: React.FC<Props> = ({\n  setFieldValue,\n  setFieldTouched,\n  diagnoses,\n  codes,\n}) => {\n  const field = \"diagnosisCodes\";\n\n  const handleChange = (event: React.ChangeEvent<{ value: string[] }>) => {\n    setFieldValue(field, event.target.value);\n    setTimeout(() => setFieldTouched(field, true));\n  };\n\n  const stateOptions = diagnoses.map((diagnosis: Diagnosis) => (\n    <MenuItem key={diagnosis.code} value={diagnosis.code}>\n      <Typography variant=\"inherit\" noWrap>\n        {diagnosis.name} ({diagnosis.code})\n      </Typography>\n    </MenuItem>\n  ));\n\n  return (\n    <Grid item xs={12}>\n      <FormControl fullWidth>\n        <Select\n          multiple\n          displayEmpty\n          value={codes}\n          onChange={handleChange}\n          input={<Input />}\n          renderValue={(selected) => (\n            <Typography variant=\"inherit\" style={{ padding: \"10px 14px\" }}>\n              {selected.length === 0 ? \"Add Diagnosis\" : selected.join(\", \")}\n            </Typography>\n          )}\n          inputProps={{ \"aria-label\": \"diagnosis\" }}\n        >\n          <MenuItem disabled value=\"\">\n            <Typography variant=\"inherit\">Diagnosis</Typography>\n          </MenuItem>\n          {stateOptions}\n        </Select>\n      </FormControl>\n    </Grid>\n  );\n};\n\nexport default EntryFormDiagnosis;\n","import React from \"react\";\nimport * as Yup from \"yup\";\nimport { Formik, Form } from \"formik\";\nimport { useStateValue } from \"../state\";\nimport { EntryFormValues, Type, HealthCheckRating } from \"../types\";\nimport EntryFormBase from \"./EntryFormBase\";\nimport EntryFormHospital from \"./EntryFormHospital\";\nimport EntryFormOccupationalHealthcare from \"./EntryFormOccupationalHealthcare\";\nimport EntryFormHealthCheck from \"./EntryFormHealthCheck\";\nimport EntryFormDiagnosis from \"./EntryFormDiagnosis\";\n\nimport { formStyle } from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\n// Yup\nconst EntrySchema = Yup.object().shape({\n  date: Yup.date().required(\"Date is required\"),\n  type: Yup.string(),\n  specialist: Yup.string()\n    .min(2, \"Name is too short\")\n    .max(35, \"Name is too long\")\n    .required(\"Specialist is required\"),\n  employerName: Yup.string()\n    .when(\"type\", {\n      is: Type.OccupationalHealthcare,\n      then: Yup.string().required(\"Employer is required\"),\n      otherwise: Yup.string(),\n    })\n    .max(35, \"Employer name is too long\"),\n  diagnosisCodes: Yup.array(),\n  description: Yup.string()\n    .max(500, \"Description is too long\")\n    .required(\"Description is required\"),\n  discharge: Yup.object().shape({\n    date: Yup.date(),\n    criteria: Yup.string()\n      .min(2, \"Text is too short\")\n      .max(250, \"Text is too long\"),\n  }),\n  sickLeave: Yup.object().shape({\n    startDate: Yup.date(),\n    endDate: Yup.date(),\n  }),\n  healthCheckRating: Yup.number(),\n});\n\ninterface Props {\n  onSubmit: (values: EntryFormValues) => void;\n  onCancel: () => void;\n}\n\nconst PatientEntryForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  const [{ diagnoses }] = useStateValue();\n\n  return (\n    <Formik\n      initialValues={{\n        date: \"\",\n        type: Type.Hospital,\n        specialist: \"\",\n        employerName: \"\",\n        diagnosisCodes: [],\n        description: \"\",\n        discharge: {\n          date: \"\",\n          criteria: \"\",\n        },\n        sickLeave: {\n          startDate: \"\",\n          endDate: \"\",\n        },\n        healthCheckRating: HealthCheckRating.Healthy,\n      }}\n      onSubmit={onSubmit}\n      validationSchema={EntrySchema}\n    >\n      {({ values, isValid, dirty, setFieldValue, setFieldTouched }) => {\n        return (\n          <Form style={formStyle}>\n            <Grid container spacing={2}>\n              <EntryFormBase />\n              {values.type === Type.Hospital && <EntryFormHospital />}\n              {values.type === Type.OccupationalHealthcare && (\n                <EntryFormOccupationalHealthcare />\n              )}\n              {values.type === Type.HealthCheck && <EntryFormHealthCheck />}\n              <EntryFormDiagnosis\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                diagnoses={Object.values(diagnoses)}\n                codes={values.diagnosisCodes}\n              />\n              <Grid item xs={6}>\n                <Button\n                  fullWidth\n                  type=\"submit\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"large\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid>\n              <Grid item xs={6}>\n                <Button\n                  fullWidth\n                  type=\"button\"\n                  color=\"secondary\"\n                  variant=\"outlined\"\n                  size=\"large\"\n                  onClick={onCancel}\n                >\n                  Cancel\n                </Button>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default PatientEntryForm;\n","import React from \"react\";\nimport { EntryFormValues } from \"../types\";\nimport AddEntryForm from \"./AddEntryForm\";\nimport ErrorMessage from \"../components/ErrorMessage\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\n\ninterface Props {\n  handleSubmit: (values: EntryFormValues) => void;\n  handleOpen: () => void;\n  handleClose: () => void;\n  open: boolean;\n  error?: string;\n}\n\nconst AddEntryModal: React.FC<Props> = ({\n  handleSubmit,\n  handleOpen,\n  handleClose,\n  open,\n  error,\n}) => (\n  <div>\n    <Button type=\"button\" variant=\"outlined\" onClick={handleOpen}>\n      Add New Entry\n    </Button>\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <AddEntryForm onSubmit={handleSubmit} onCancel={handleClose} />\n      {error && <ErrorMessage error={error} />}\n    </Dialog>\n  </div>\n);\n\nexport default AddEntryModal;\n","// Change date format ie. from 2021-01-01 to Fri Jan 01 2021\nexport const getDate = (str: string): string => {\n  const date = new Date(str);\n  return date.toDateString();\n};\n\n// Change date range format\nexport const getDateRange = (start: string, end: string): string => {\n  const startDate = new Date(start);\n  const endDate = new Date(end);\n\n  return `from ${startDate.toDateString()} to ${endDate.toDateString()}`;\n};\n","import React from \"react\";\nimport { useStateValue } from \"../state\";\nimport { Diagnosis } from \"../types\";\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst EntryDiagnosis: React.FC<{ codes: Array<Diagnosis[\"code\"]> }> = ({\n  codes,\n}) => {\n  const [{ diagnoses }] = useStateValue();\n\n  const diagnosisData = Object.values(diagnoses).filter((diagnosis) =>\n    codes.includes(diagnosis.code)\n  );\n\n  return (\n    <>\n      <Typography variant=\"h6\">Diagnosis:</Typography>\n      <List disablePadding>\n        {diagnosisData.map((diagnosis) => (\n          <ListItem key={diagnosis.code}>\n            <ListItemText primary={diagnosis.name} secondary={diagnosis.code} />\n          </ListItem>\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default EntryDiagnosis;\n","import React, { ReactChild, ReactChildren } from \"react\";\nimport { getDate } from \"../utils\";\nimport { Diagnosis } from \"../types\";\nimport EntryDiagnosis from \"./EntryDiagnosis\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport LocalHospital from \"@material-ui/icons/LocalHospital\";\nimport HomeRepairService from \"@material-ui/icons/HomeRepairService\";\nimport Poll from \"@material-ui/icons/Poll\";\nimport { red, orange, green } from \"@material-ui/core/colors\";\n\ninterface Props {\n  type: string;\n  date: string;\n  description: string;\n  codes?: Array<Diagnosis[\"code\"]>;\n  children?: ReactChild | ReactChildren;\n}\n\nconst EntryCard: React.FC<Props> = ({\n  type,\n  date,\n  description,\n  codes,\n  children,\n}) => {\n  const getAvatar = (param: string) => {\n    switch (param) {\n      case \"Occupational Healthcare\":\n        return (\n          <Avatar style={{ backgroundColor: orange[700] }}>\n            <HomeRepairService />\n          </Avatar>\n        );\n      case \"Health Check\":\n        return (\n          <Avatar style={{ backgroundColor: green[700] }}>\n            <Poll />\n          </Avatar>\n        );\n      default:\n        return (\n          <Avatar style={{ backgroundColor: red[700] }}>\n            <LocalHospital />\n          </Avatar>\n        );\n    }\n  };\n\n  return (\n    <Grid item xs={12}>\n      <Card>\n        <CardHeader\n          avatar={getAvatar(type)}\n          title={type}\n          subheader={getDate(date)}\n        />\n        <CardContent>\n          {codes && codes.length > 0 ? <EntryDiagnosis codes={codes} /> : null}\n          <Typography\n            color=\"textSecondary\"\n            component=\"p\"\n            style={{ marginBottom: 15 }}\n          >\n            {description}\n          </Typography>\n          {children && (\n            <>\n              <Divider variant=\"fullWidth\" />\n              <div style={{ marginTop: 15 }}>{children}</div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default EntryCard;\n","import React from \"react\";\nimport { HospitalEntry } from \"../types\";\nimport { getDate } from \"../utils\";\nimport EntryCard from \"./EntryCard\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nconst EntryHospital: React.FC<{ entry: HospitalEntry }> = ({ entry }) => (\n  <EntryCard\n    type=\"Hospital\"\n    date={entry.date}\n    description={entry.description}\n    codes={entry.diagnosisCodes}\n  >\n    {entry.discharge ? (\n      <>\n        <Typography gutterBottom component=\"p\">\n          Discharged from hospital on {getDate(entry.discharge.date)}.\n        </Typography>\n        <Typography component=\"p\">\n          Discharge criteria: {entry.discharge.criteria}\n        </Typography>\n      </>\n    ) : (\n      \"\"\n    )}\n  </EntryCard>\n);\n\nexport default EntryHospital;\n","import React from \"react\";\nimport { OccupationalHealthcareEntry } from \"../types\";\nimport { getDateRange } from \"../utils\";\nimport EntryCard from \"./EntryCard\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nconst EntryOccupationalHealthcare: React.FC<{\n  entry: OccupationalHealthcareEntry;\n}> = ({ entry }) => (\n  <EntryCard\n    type=\"Occupational Healthcare\"\n    date={entry.date}\n    description={entry.description}\n    codes={entry.diagnosisCodes}\n  >\n    <>\n      {entry.sickLeave && (\n        <Typography gutterBottom component=\"p\">\n          On sick leave{\" \"}\n          {getDateRange(entry.sickLeave.startDate, entry.sickLeave.endDate)}.\n        </Typography>\n      )}\n      <Typography component=\"p\">Employer: {entry.employerName}</Typography>\n    </>\n  </EntryCard>\n);\n\nexport default EntryOccupationalHealthcare;\n","import React from \"react\";\nimport { HealthCheckEntry } from \"../types\";\nimport EntryCard from \"./EntryCard\";\nimport HealthRatingBar from \"./HealthRatingBar\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nconst EntryHealthCheck: React.FC<{ entry: HealthCheckEntry }> = ({ entry }) => (\n  <EntryCard\n    type=\"Health Check\"\n    date={entry.date}\n    description={entry.description}\n    codes={entry.diagnosisCodes}\n  >\n    <Typography component=\"p\">\n      Health assessment:{\" \"}\n      {<HealthRatingBar rating={entry.healthCheckRating} showText />}\n    </Typography>\n  </EntryCard>\n);\n\nexport default EntryHealthCheck;\n","import React from \"react\";\nimport { Entry } from \"../types\";\n\nimport EntryHospital from \"./EntryHospital\";\nimport EntryOccupationalHealthcare from \"./EntryOccupationalHealthcare\";\nimport EntryHealthCheck from \"./EntryHealthCheck\";\n\nconst EntryDetails: React.FC<{ entry: Entry }> = ({ entry }) => {\n  switch (entry.type) {\n    case \"Hospital\":\n      return <EntryHospital entry={entry} />;\n    case \"OccupationalHealthcare\":\n      return <EntryOccupationalHealthcare entry={entry} />;\n    case \"HealthCheck\":\n      return <EntryHealthCheck entry={entry} />;\n    default:\n      /* https://stackoverflow.com/questions/39419170/how-do-i-check-that-a-switch-block-is-exhaustive-in-typescript */\n      ((entry: string): never => {\n        throw new Error(`${entry} is an unknown entry type`);\n      })(entry);\n  }\n};\n\nexport default EntryDetails;\n","import React from \"react\";\nimport { Entry, EntryFormValues } from \"../types\";\nimport AddEntryModal from \"../AddEntryModal\";\nimport EntryDetails from \"../components/EntryDetails\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\ninterface EntryProps {\n  entries: Entry[] | undefined;\n  handleSubmit: (values: EntryFormValues) => void;\n  handleOpen: () => void;\n  handleClose: () => void;\n  open: boolean;\n  error?: string;\n}\n\nconst PatientEntries: React.FC<EntryProps> = ({\n  entries,\n  handleSubmit,\n  handleOpen,\n  handleClose,\n  open,\n  error,\n}) => (\n  <Grid container>\n    <Typography\n      variant=\"h5\"\n      component=\"h4\"\n      color=\"textPrimary\"\n      style={{ marginRight: 25 }}\n    >\n      Entries\n    </Typography>\n    <AddEntryModal\n      handleSubmit={handleSubmit}\n      handleOpen={handleOpen}\n      handleClose={handleClose}\n      open={open}\n      error={error}\n    />\n    <Grid container item xs={12} spacing={3} style={{ marginTop: 25 }}>\n      {entries && entries.length > 0 ? (\n        entries.map((entry) => <EntryDetails key={entry.id} entry={entry} />)\n      ) : (\n        <Typography\n          component=\"h6\"\n          color=\"textSecondary\"\n          style={{ marginLeft: 15 }}\n        >\n          No entries\n        </Typography>\n      )}\n    </Grid>\n  </Grid>\n);\n\nexport default PatientEntries;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { apiBaseUrl } from \"../constants\";\nimport { useStateValue, updatePatient, addPatient } from \"../state\";\nimport { Patient, Entry, EntryFormValues } from \"../types\";\nimport PatientDetails from \"./PatientDetails\";\nimport PatientEntries from \"./PatientEntries\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nconst PatientPage: React.FC<{ handlePatientList: () => void }> = ({\n  handlePatientList,\n}) => {\n  const [{ patients, patient }, dispatch] = useStateValue();\n  const { id } = useParams<{ id: string }>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [open, setOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const handleOpen = () => setOpen(true);\n\n  const handleError = () => setError(undefined);\n\n  const handleClose = () => {\n    setOpen(false);\n    handleError();\n  };\n\n  const fetchPatientListFromAPI = () => {\n    handlePatientList();\n  };\n\n  const fetchPatientFromAPI = async () => {\n    try {\n      const { data: patientFromApi } = await axios.get<Patient>(\n        `${apiBaseUrl}/patients/${id}`\n      );\n\n      dispatch(updatePatient(patientFromApi));\n      setLoading(true);\n    } catch (err: unknown) {\n      err instanceof Error ? setError(err.message) : setError(\"Unknown Error\");\n    }\n  };\n\n  const updatePatientToAPI = async (id: string, entry: Entry) => {\n    try {\n      const { data: patientFromApi } = await axios.put<Patient>(\n        `${apiBaseUrl}/patients/${id}`,\n        entry\n      );\n\n      // update patients state\n      if (entry.type === \"HealthCheck\") {\n        // if new entry type is health check\n        // change patient's health check rating\n        dispatch(\n          addPatient({\n            ...patientFromApi,\n            healthRating: entry.healthCheckRating,\n          })\n        );\n      } else {\n        dispatch(addPatient(patientFromApi));\n      }\n\n      // update patient state\n      dispatch(updatePatient(patientFromApi));\n    } catch (err: unknown) {\n      err instanceof Error ? setError(err.message) : setError(\"Unknown Error\");\n    }\n  };\n\n  useEffect(() => {\n    const fetchPatient = () => {\n      if (!patient || (patient && patient.id !== id)) {\n        const checkPatientList = Object.keys(patients).includes(id);\n\n        checkPatientList ? void fetchPatientFromAPI() : setLoading(false);\n      }\n    };\n\n    // fetch patients form API\n    // when state does not presist\n    // (ie. browser refresh or direct link)\n    Object.keys(patients).length > 1\n      ? fetchPatient()\n      : fetchPatientListFromAPI();\n  }, [patient, patients]);\n\n  const submitNewEntry = async (values: EntryFormValues) => {\n    try {\n      const { data: newEntry } = await axios.post<Entry>(\n        `${apiBaseUrl}/patients/${id}/entries`,\n        values\n      );\n\n      // update patient info\n      void updatePatientToAPI(id, newEntry);\n      handleClose();\n    } catch (err: unknown) {\n      err instanceof Error ? setError(err.message) : setError(\"Unknown Error\");\n    }\n  };\n\n  // initially loading is set to true\n  // after first fetch, loading is set to false\n  if ((!patient && loading) || (patient && patient.id !== id)) {\n    return <Typography>Loading...</Typography>;\n  }\n\n  if (!patient) {\n    return <Typography>No such patient exist in the database.</Typography>;\n  }\n\n  return (\n    <>\n      <PatientDetails patient={patient} />\n      <PatientEntries\n        entries={patient.entries}\n        handleSubmit={submitNewEntry}\n        handleOpen={handleOpen}\n        handleClose={handleClose}\n        open={open}\n        error={error}\n      />\n    </>\n  );\n};\n\nexport default PatientPage;\n","import React from \"react\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nconst ErrorPage: React.FC = () => <Typography>Page not found.</Typography>;\n\nexport default ErrorPage;\n","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { apiBaseUrl } from \"./constants\";\nimport { useStateValue, setPatientList, setDiagnosisList } from \"./state\";\nimport { Patient, Diagnosis } from \"./types\";\nimport Header from \"./components/Header\";\nimport PatientListPage from \"./PatientListPage\";\nimport PatientPage from \"./PatientPage\";\nimport ErrorPage from \"./components/ErrorPage\";\n\nimport Container from \"@material-ui/core/Container\";\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n\n  const fetchPatientList = async () => {\n    try {\n      const { data: patientListFromApi } = await axios.get<Patient[]>(\n        `${apiBaseUrl}/patients`\n      );\n\n      dispatch(setPatientList(patientListFromApi));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const fetchDiagnosisList = async () => {\n    try {\n      const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\n        `${apiBaseUrl}/diagnosis`\n      );\n      dispatch(setDiagnosisList(diagnosisListFromApi));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    // axios.get<void>(`${apiBaseUrl}/ping`);\n    void fetchPatientList();\n    void fetchDiagnosisList();\n  }, [dispatch]);\n\n  return (\n    <Router>\n      <Container>\n        <Header />\n        <Switch>\n          <Route path=\"/patients/:id\">\n            <PatientPage handlePatientList={fetchPatientList} />\n          </Route>\n          <Route exact path=\"/\">\n            <PatientListPage />\n          </Route>\n          <Route path=\"/\">\n            <ErrorPage />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { reducer, StateProvider } from \"./state\";\n// import reportWebVitals from './reportWebVitals';\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </StateProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n//\n"],"sourceRoot":""}